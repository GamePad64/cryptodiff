/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "crypto/RsyncChecksum.h"
#include <botan/aes.h>
#include <botan/botan.h>
#include <botan/keccak.h>
#include <iostream>
#include <fstream>

int cryptordiff_sig(int argc, char** argv){
	Botan::LibraryInitializer init("thread_safe=true");

	const size_t RS_BLOCKSIZE = 4096;

	Botan::AutoSeeded_RNG rng;
	auto key = rng.random_vec(32);
	auto iv = rng.random_vec(16);
	//auto encrypted = encrypt(s, key, iv);

	std::ifstream input("input.txt");
	std::ofstream output("output.txt");
	std::ofstream output_meta("output_meta.txt");

	std::string rdbuf; rdbuf.resize(RS_BLOCKSIZE, ' ');
	Botan::Keccak_1600 hasher(224);
	do {
		input.read(&*rdbuf.begin(), RS_BLOCKSIZE);
		if(input.gcount() > 0){
			uint32_t sum = RsyncChecksum(rdbuf.data(), RS_BLOCKSIZE);
			output.write(reinterpret_cast<char*>(&sum), sizeof(sum));
			auto v = hasher.process(reinterpret_cast<const uint8_t*>(rdbuf.data()), RS_BLOCKSIZE);
			output.write(reinterpret_cast<char*>(v.data()), v.size());
		}
	} while(input.good() && output.good());

//	std::cout << encrypted << std::endl << encrypted.size() << " " << sum << " " << sum_roll << " " << sum1 << " " << sum2;
}
